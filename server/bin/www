const http = require('http');
const debug = require('debug')('dataDisplayApp:server');
const fs = require('fs');

const logger = require('../services/app.logger');
const env = require('../config').env;
const constants = require('../constants');

const appConstants = constants.app;
const loggerConfig = constants.logger;
let appName = appConstants.APPNAME;
let app = require('../app/app')(appName);

// Get port from environment and store in Express.
let port = normalizePort(env.PORT);

// Create HTTP server.
let server = http.createServer(app);
app.io.attach(server); 

//Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
logger.debug(loggerConfig.SERVER_RUNNING + port);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  let port = parseInt(val, 10);
  if(isNaN(port)) {
    return val;
  }
  if(port >= 0) {
    return port;
  }
  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if(error.syscall !== 'listen') {
    throw error;
  }

	let bind = typeof port === 'string' ?
	  'Pipe ' + port :
	  'Port ' + port;

// handle specific listen errors with friendly messages
	switch (error.code) {
	  case 'EACCES':
      logger.error(bind + loggerConfig.REQUIRES_ELEVATED_PRIVILEGES);
      process.exit(1);
      break;
	  case 'EADDRINUSE':
      logger.error(bind + loggerConfig.ALREADY_IN_USE);
      process.exit(1);
      break;
	  default:
      throw error;
	}
}

// Event listener for HTTP server "listening" event.
function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
